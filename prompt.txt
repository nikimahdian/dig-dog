Role: Senior JavaFX game engineer.
Goal: Build a playable tower-defense prototype in pure JavaFX with one hardcoded map that exactly matches sample.jpg, using PNGs from Kenney’s “Default size” set (299 tiles). No external graphics libs. Programmatic JavaFX only.

0) Tech & project

Java: 17+, JavaFX only (no FXML).

Gradle app; main class game.Main.

Tile size: 64×64 px. Grid: 11 cols × 9 rows (x:0..10, y:0..8).

Assets root: PNGs inside the ZIP folder Default size/ with names like towerDefense_tile###.png.

1) Use these exact PNGs for each element
Tiles & overlays

Grass: Default size/towerDefense_tile074.png

Dirt straight horizontal: …004.png

Dirt straight vertical: …009.png

Dirt corner (rotate as needed): …005.png

Sand pad: …029.png

Build slot (green + wrench): …039.png

Speed-bump slot (green X): …040.png

Bomb slot (grey target): …092.png

Small rock decor: …059.png

Player defenses

Fast Tower (rapid-fire, low HP): …249.png (green turret)

Heavy Tower (slow, high HP): …250.png (red turret)

AA Cheap (60% hit): …193.png (triple small missiles)

AA Expensive (80% hit): …194.png (bigger triple missiles)

Enemies

Soldier (use one frame): …247.png (brown soldier)
(optional walking variety: …246.png / …248.png)

Tank – ENEMY: …269.png (beige tank)

Plane – ENEMY: …271.png (grey plane)

(Optional friendlies for future bonus)

Tank – ALLY: …268.png (green tank)

Plane – ALLY: …270.png (green plane)

Projectiles / FX

Bullet (towers): …272.png (small yellow)

Tank shell: …274.png (brown/orange)

AA rocket (cheap): …251.png; (expensive): …252.png

Hit/Fire FX: …285.png (small), …286.png (medium), …288.png (spark)

Rotations: rotate via GC transforms around tile center; never rescale.

2) Map must match the screenshot exactly

Base fill: grass everywhere; then paint dirt path, corners, sand pad, overlays, décor.

Path geometry

Route A (left vertical lane):
(0,0)…(0,8) → draw …009.png (vertical) on each cell.

Route B (top → right edge → left turn at mid):

Top row (1,0)…(9,0) → …004.png (horizontal).

Corner at (10,0): …005.png rotated 90° CW (left→down).

Right vertical (10,1)…(10,5) → …009.png.

Corner at (10,6): …005.png rotated 180° (up→left).

Mid horizontal (9,6),(8,6),(7,6),(6,6) → …004.png.

Sand pad (top-right strip)

(7,1),(8,1),(9,1) → …029.png (repeat). (Pad is visible below three build slots, as in sample.jpg.)

Build-slot positions

(2,2),(3,2),(2,3),(3,3),(2,5),(9,2),(9,3),(9,4),(9,6),(6,5) → draw …039.png.

Gadget slots

Speed-bump markers on path at (0,3) and (10,2) → draw …040.png.

Bomb marker on (9,6) → draw …092.png.

Minimal décor (match vibe)

Place rocks …059.png at (4,3), (3,6), (5,7).

3) Core gameplay to implement now
Economy (thread-safe)

Start money: 100.

Add +5 every 0.5s via ScheduledExecutorService; push updates to JavaFX thread (Platform.runLater).

Towers (place only on build slots)

Fast Tower: Cost 50, HP 100, Range 3 tiles, 4 shots/sec, Damage: 8 (Soldier), 4 (Tank), 0 (Plane). Sprite …249.png.

Heavy Tower: Cost 80, HP 220, Range 4, 1 shot/sec, Damage: 20 (Soldier), 12 (Tank), 0 (Plane). Sprite …250.png.

AA Cheap (60%): Cost 90, global coverage, 60% hit per plane pass, sprite …193.png, projectile …251.png.

AA Expensive (80%): Cost 140, 80% hit, sprite …194.png, projectile …252.png.

Targeting: Closest-to-exit, tie-break = lowest HP. Ground towers never target planes.

Enemies & movement

Soldier: HP 40, Speed 1.0 tiles/s, Power=1. Sprite …247.png.

Tank: HP 260, Speed 0.6, Power=2, fires at towers within 3 tiles, 1 shot/s, 12 dmg. Sprite …269.png.

Plane: Speed 3.0, Power=3, spawns occasionally; on entry selects one row/column to bombard (choose causing max money/tower loss). Sprite …271.png.

Motion: continuous interpolation (not tile-step). Tanks occupy more spacing (~2× soldier).

Gadgets (buyable on their markers)

Speed-bump: cost 25; when an enemy is inside the tile → speed ×0.5; lifetime 12s then removed.

Bomb: cost 40; first enemy entering detonates (small AoE), then disappears.

Waves & rules

6 waves; +10% enemy HP per wave; difficulty multiplies counts/speeds.

Leak defeat: if leaked power sum ≥ 10% of total power for the level → Game Over.

Victory: all enemies destroyed and no plane remaining.

HUD (simple)

Show money, castle HP, leaked %, wave index/remaining groups, and a wave timer on the side/top.

4) Rendering & structure

MapRenderer: single Canvas paints in order: grass → dirt straights → dirt corners → sand → slots (build/speed/bomb) → décor.

Sprites: load PNGs once; rotations via GraphicsContext transforms.

Packages/classes (minimum):

game/
  Main.java, App.java, Config.java
  core/ GameLoop.java (AnimationTimer), ResourceManager.java, WaveManager.java
  map/ MapDefinition.java, Grid.java, Route.java, MapRenderer.java
  entity/ Entity.java, Enemy.java, Soldier.java, Tank.java, Plane.java,
          Tower.java, FastTower.java, HeavyTower.java,
          AntiAir.java, AA60.java, AA80.java, Projectile.java
  ui/ HudView.java, BuildMenu.java


All tunables (speeds, HP, costs, ranges) in Config.

Thread confinement: entity lists mutate on FX thread; only money uses executor with Platform.runLater.

5) Acceptance checklist

Geometry & visuals match sample.jpg (same lanes, corners, sand strip, build slot positions).

Place towers/AA only on given slots; buy speed-bump/bomb on their markers.

Enemies move smoothly along the exact routes; tanks fire back; planes interact with AA.

Economy ticks correctly and is thread-safe.

Win/Lose conditions work (10% power leak).

No external graphics libs; gradle run launches the game.

(Optional) Asset alias map

If your project loader wants a dictionary, use:

Map<String,String> ASSET = Map.ofEntries(
  // tiles
  e("grass","Default size/towerDefense_tile074.png"),
  e("dirtH","Default size/towerDefense_tile004.png"),
  e("dirtV","Default size/towerDefense_tile009.png"),
  e("corner","Default size/towerDefense_tile005.png"),
  e("sand","Default size/towerDefense_tile029.png"),
  e("slot.build","Default size/towerDefense_tile039.png"),
  e("slot.speed","Default size/towerDefense_tile040.png"),
  e("slot.bomb","Default size/towerDefense_tile092.png"),
  e("rock","Default size/towerDefense_tile059.png"),
  // towers
  e("tower.fast","Default size/towerDefense_tile249.png"),
  e("tower.heavy","Default size/towerDefense_tile250.png"),
  e("tower.aa60","Default size/towerDefense_tile193.png"),
  e("tower.aa80","Default size/towerDefense_tile194.png"),
  // enemies
  e("enemy.soldier","Default size/towerDefense_tile247.png"),
  e("enemy.tank","Default size/towerDefense_tile269.png"),
  e("enemy.plane","Default size/towerDefense_tile271.png"),
  // friendlies (bonus)
  e("ally.tank","Default size/towerDefense_tile268.png"),
  e("ally.plane","Default size/towerDefense_tile270.png"),
  // projectiles / fx
  e("proj.bullet","Default size/towerDefense_tile272.png"),
  e("proj.tank","Default size/towerDefense_tile274.png"),
  e("proj.aa60","Default size/towerDefense_tile251.png"),
  e("proj.aa80","Default size/towerDefense_tile252.png"),
  e("fx.hit.small","Default size/towerDefense_tile285.png"),
  e("fx.hit.med","Default size/towerDefense_tile286.png")
);